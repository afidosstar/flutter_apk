image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"
  FLUTTER_VERSION: "https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.8.1-stable.tar.xz"
  TAG: $CI_COMMIT_TAG

before_script:
  - apt-get --quiet update --yes

  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip

  - unzip -d android-sdk-linux android-sdk.zip

  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null

  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null

  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null

  - export ANDROID_HOME=$PWD/android-sdk-linux


  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/

  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

  # flutter sdk setup
  - curl -o flutter-sdk.tar.xz $FLUTTER_VERSION
  #- wget --output-document=flutter-sdk.tar.xz $FLUTTER_VERSION
  - tar -xf flutter-sdk.tar.xz
  - export PATH=$PATH:$PWD/flutter/bin
  - echo flutter.sdk=$PWD/flutter > android/local.properties
  - chmod +x ./android/gradlew
  - flutter pub get
  - flutter pub run environment_config:generate --dev
  - flutter pub run build_runner build --delete-conflicting-outputs
  - "export VERSION=$(cat pubspec.yaml | grep ^version: | head -1 | awk -F: '{ print $2 }'| sed 's/+/.b/g' | tr -d '[[:space:]]')"

stages:
  - test
  - build


#test:android:
#  stage: test
#  only:
#    - release
#    - master
#  tags:
#    - ubuntuOStest
#  script:
#    - cd android
#    - ./gradlew -Pci --console=plain :app:testDebug



test:flutter:
  stage: test
  only:
    - nain
    - master
  tags:
    - ubuntuOStest
  script:
    - flutter test


release:apk:
  stage: build
  only:
    - master
  tags:
    - ubuntuOStest
  script:
    - flutter pub run environment_config:generate --config-extension=stagging
    - flutter build apk --split-per-abi
    - export APP_NAME=app-$VERSION-release.apk
    - mkdir -p dist
    - mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk dist/$APP_NAME
  artifacts:
    paths:
      - dist/$APP_NAME


build:apk:
  stage: build
  only:
    - main
  tags:
    - ubuntuOStest
  script:
    - flutter pub run environment_config:generate
    - flutter build apk --split-per-abi
    - export APP_NAME=app-$VERSION-production.apk
    - mkdir -p dist
    - mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk dist/$APP_NAME
  artifacts:
    paths:
      - dist/$APP_NAME



#build:bundle:
#  stage: build
#  tags:
#    - ubuntuOStest
#  script:
#    - flutter pub run environment_config:generate
#    - flutter build appbundle
#  artifacts:
#    paths:
#      - build/app/outputs/bundle
